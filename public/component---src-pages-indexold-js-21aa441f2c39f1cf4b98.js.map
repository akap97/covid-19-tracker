{"version":3,"sources":["webpack:///./src/assets/images/gatsby-astronaut.jpg","webpack:///./node_modules/react-leaflet/es/Marker.js","webpack:///./src/lib/map.js","webpack:///./src/pages/indexold.js"],"names":["module","exports","_MapLayer","Marker","apply","this","arguments","_proto","prototype","createLeafletElement","props","el","position","getOptions","contextValue","leaflet","popupContainer","updateLeafletElement","fromProps","toProps","leafletElement","setLatLng","icon","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","draggable","dragging","enable","disable","render","children","createElement","value","promiseToFlyTo","map","zoom","center","Promise","resolve","reject","flyTo","baseError","mapCenter","getCenter","mapZoom","getZoom","duration","once","getCurrentLocation","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lng","longitude","err","LOCATION","CENTER","popupContentGatsby","gatsby_astronaut","IndexPage","markerRef","useRef","a","popup","L","maxWidth","catch","location","current","marker","setContent","setTimeout","bindPopup","openPopup","setPopupContent","timeToOpenPopupAfterZoom","mapSettings","defaultBaseMap","mapEffect","Layout","pageName","Map","ref","Container","type","className"],"mappings":"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","file":"component---src-pages-indexold-js-21aa441f2c39f1cf4b98.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/gatsby-astronaut-bc0d3e62a65b60da7d3605c881c81fff.jpg\";","\"use strict\";\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { Marker as LeafletMarker } from 'leaflet';\nimport React from 'react';\nimport { LeafletProvider, withLeaflet } from './context';\nimport MapLayer from './MapLayer';\n\nvar Marker = /*#__PURE__*/function (_MapLayer) {\n  _inheritsLoose(Marker, _MapLayer);\n\n  function Marker() {\n    return _MapLayer.apply(this, arguments) || this;\n  }\n\n  var _proto = Marker.prototype;\n\n  _proto.createLeafletElement = function createLeafletElement(props) {\n    var el = new LeafletMarker(props.position, this.getOptions(props));\n    this.contextValue = _extends({}, props.leaflet, {\n      popupContainer: el\n    });\n    return el;\n  };\n\n  _proto.updateLeafletElement = function updateLeafletElement(fromProps, toProps) {\n    if (toProps.position !== fromProps.position) {\n      this.leafletElement.setLatLng(toProps.position);\n    }\n\n    if (toProps.icon !== fromProps.icon) {\n      this.leafletElement.setIcon(toProps.icon);\n    }\n\n    if (toProps.zIndexOffset !== fromProps.zIndexOffset) {\n      this.leafletElement.setZIndexOffset(toProps.zIndexOffset);\n    }\n\n    if (toProps.opacity !== fromProps.opacity) {\n      this.leafletElement.setOpacity(toProps.opacity);\n    }\n\n    if (toProps.draggable !== fromProps.draggable) {\n      if (toProps.draggable === true) {\n        this.leafletElement.dragging.enable();\n      } else {\n        this.leafletElement.dragging.disable();\n      }\n    }\n  };\n\n  _proto.render = function render() {\n    var children = this.props.children;\n    return children == null || this.contextValue == null ? null : React.createElement(LeafletProvider, {\n      value: this.contextValue\n    }, children);\n  };\n\n  return Marker;\n}(MapLayer);\n\nexport default withLeaflet(Marker);","/**\n * promiseToFlyTo\n * @description\n */\n\nexport function promiseToFlyTo( map, { zoom, center }) {\n  return new Promise(( resolve, reject ) => {\n    const baseError = 'Failed to fly to area';\n\n    if ( !map.flyTo ) {\n      reject( `${baseError}: no flyTo method on map` );\n    }\n\n    if ( typeof zoom !== 'number' ) {\n      reject( `${baseError}: zoom invalid number ${zoom}` );\n    }\n\n    const mapCenter = center || map.getCenter();\n    const mapZoom = zoom || map.getZoom();\n\n    map.flyTo( mapCenter, mapZoom, {\n      duration: 2\n    });\n\n    map.once( 'moveend', () => {\n      resolve();\n    });\n  });\n}\n\n/**\n * getCurrentLocation\n * @description\n */\n\nexport function getCurrentLocation() {\n  return new Promise(( resolve, reject ) => {\n    navigator.geolocation.getCurrentPosition(\n      ( pos ) => resolve({ lat: pos.coords.latitude, lng: pos.coords.longitude }),\n      ( err ) => reject( err )\n    );\n  });\n}\n","import React, { useRef } from 'react';\nimport Helmet from 'react-helmet';\nimport L from 'leaflet';\nimport { Marker } from 'react-leaflet';\n\nimport { promiseToFlyTo, getCurrentLocation } from 'lib/map';\n\nimport Layout from 'components/Layout';\nimport Container from 'components/Container';\nimport Map from 'components/Map';\n\nimport gatsby_astronaut from 'assets/images/gatsby-astronaut.jpg';\n\nconst LOCATION = {\n  lat: 38.9072,\n  lng: -77.0369\n};\nconst CENTER = [LOCATION.lat, LOCATION.lng];\nconst DEFAULT_ZOOM = 2;\nconst ZOOM = 10;\n\nconst timeToZoom = 2000;\nconst timeToOpenPopupAfterZoom = 4000;\nconst timeToUpdatePopupAfterZoom = timeToOpenPopupAfterZoom + 3000;\n\nconst popupContentHello = `<p>Hello ðŸ‘‹</p>`;\nconst popupContentGatsby = `\n  <div class=\"popup-gatsby\">\n    <div class=\"popup-gatsby-image\">\n      <img class=\"gatsby-astronaut\" src=${gatsby_astronaut} />\n    </div>\n    <div class=\"popup-gatsby-content\">\n      <h1>Gatsby Leaflet Starter</h1>\n      <p>Welcome to your new Gatsby site. Now go build something great!</p>\n    </div>\n  </div>\n`;\n\nconst IndexPage = () => {\n  const markerRef = useRef();\n\n  /**\n   * mapEffect\n   * @description Fires a callback once the page renders\n   * @example Here this is and example of being used to zoom in and set a popup on load\n   */\n\n  async function mapEffect({ leafletElement } = {}) {\n    if ( !leafletElement ) return;\n\n    const popup = L.popup({\n      maxWidth: 800\n    });\n\n    const location = await getCurrentLocation().catch(() => LOCATION );\n\n    const { current = {} } = markerRef || {};\n    const { leafletElement: marker } = current;\n\n    marker.setLatLng( location );\n    popup.setLatLng( location );\n    popup.setContent( popupContentHello );\n\n    setTimeout( async () => {\n      await promiseToFlyTo( leafletElement, {\n        zoom: ZOOM,\n        center: location\n      });\n\n      marker.bindPopup( popup );\n\n      setTimeout(() => marker.openPopup(), timeToOpenPopupAfterZoom );\n      setTimeout(() => marker.setPopupContent( popupContentGatsby ), timeToUpdatePopupAfterZoom );\n    }, timeToZoom );\n  }\n\n  const mapSettings = {\n    center: CENTER,\n    defaultBaseMap: 'OpenStreetMap',\n    zoom: DEFAULT_ZOOM,\n    mapEffect\n  };\n\n  return (\n    <Layout pageName=\"home\">\n      <Helmet>\n        <title>Home Page</title>\n      </Helmet>\n\n      <Map {...mapSettings}>\n        <Marker ref={markerRef} position={CENTER} />\n      </Map>\n\n      <Container type=\"content\" className=\"text-center home-start\">\n        <h2>Still Getting Started?</h2>\n        <p>Run the following in your terminal!</p>\n        <pre>\n          <code>gatsby new [directory] https://github.com/colbyfayock/gatsby-starter-leaflet</code>\n        </pre>\n        <p className=\"note\">Note: Gatsby CLI required globally for the above command</p>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n"],"sourceRoot":""}